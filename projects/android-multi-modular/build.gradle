buildscript {

    ext {
        kotlin_version = '1.6.0'
    }

    ext.PluginsVersions = [
            "GradlePluginV"        : "4.2.0-alpha16",
            "KotlinPluginV"        : "1.6.0",
            "EasyLauncherPluginV"  : "1.3.1",
            "FirebasePluginV"      : "4.3.1",
            "KtlintPluginV"        : "2.1.1",
            "NavigationPluginV"    : "2.5.0-alpha01",
            "HiltPluginV"          : "2.38.1",
            "FirebaseCrashlyticsV" : "2.4.1"
    ]

    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${rootProject.ext.PluginsVersions.GradlePluginV}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${rootProject.ext.PluginsVersions.KotlinPluginV}"
        classpath "com.akaita.android:easylauncher:${rootProject.ext.PluginsVersions.EasyLauncherPluginV}"
        classpath "com.google.gms:google-services:${rootProject.ext.PluginsVersions.FirebasePluginV}"
        classpath "org.jmailen.gradle:kotlinter-gradle:${rootProject.ext.PluginsVersions.KtlintPluginV}"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:${rootProject.ext.PluginsVersions.NavigationPluginV}"
        classpath "com.google.dagger:hilt-android-gradle-plugin:${rootProject.ext.PluginsVersions.HiltPluginV}"
        classpath "com.google.firebase:firebase-crashlytics-gradle:${rootProject.ext.PluginsVersions.FirebaseCrashlyticsV}"
    }

}

apply from: "Libraries.gradle"
apply from: "AppDetails.gradle"

subprojects {
    if (!project.name.contains("app")) {

        apply plugin: "${rootProject.ext.AndroidLibraryPlugin}"
        apply plugin: "${rootProject.ext.KotlinAndroidPlugin}"
        apply plugin: "${rootProject.ext.KotlinAndroidExPlugin}"
        apply plugin: "${rootProject.ext.KotlinKaptPlugin}"

        android {

            compileSdkVersion rootProject.ext.compileSdkV
            buildToolsVersion "${rootProject.ext.BuildToolsVersion}"
            defaultConfig {
                minSdkVersion rootProject.ext.minSdkV
                targetSdkVersion rootProject.ext.compileSdkV
                renderscriptTargetApi rootProject.ext.renderscriptTargetApi
                renderscriptSupportModeEnabled rootProject.ext.renderscriptSupportModeEnabled
                multiDexEnabled rootProject.ext.MultiDexMergeEnabled
                versionCode rootProject.ext.VersionCode
                versionName "${rootProject.ext.ApplicationVersion}"
                testInstrumentationRunner "${rootProject.ext.AndroidTest}"
                resConfigs "en", "ar"
                javaCompileOptions {
                    annotationProcessorOptions {
                        arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
                    }
                }
            }

            buildTypes {

                debug {
                    minifyEnabled false
                    debuggable true
                    manifestPlaceholders = [enableCrashReporting: "false"]
                    ext.enableCrashlytics = false
                    ext.alwaysUpdateBuildId = false
                    proguardFiles getDefaultProguardFile("${rootProject.ext.ProguardFile}"), "${rootProject.ext.Proguard}"
                }

                release {
                    minifyEnabled true
                    debuggable false
                    ext.enableCrashlytics = true
                    manifestPlaceholders = [enableCrashReporting: "true"]
                    proguardFiles getDefaultProguardFile("${rootProject.ext.ProguardFile}"), "${rootProject.ext.Proguard}"
                }

            }

        }

        dependencies { config ->
            defaultTestingConfiguration(config)
            def RxConfiguration = rootProject.ext.RxConfiguration
            def KotlinCoroutinesConfiguration = rootProject.ext.KotlinCoroutinesConfiguration

            implementation RxConfiguration.RxJava
            implementation RxConfiguration.RxAndroid

            implementation KotlinCoroutinesConfiguration.Coroutines
            implementation KotlinCoroutinesConfiguration.AndroidCoroutines

            daggerConfig(config)

            if (project.name.equals("domain")) {
                lifeCycleConfiguration(config)
            }

        }

    }

}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500"
    }
}

void daggerConfig(configuration) {
    def DependenciesInjection = rootProject.ext.DependenciesInjection
    configuration.implementation DependenciesInjection.Dagger
    configuration.kapt DependenciesInjection.DaggerCompiler
    configuration.implementation DependenciesInjection.DaggerAndroid
    configuration.implementation DependenciesInjection.Hilt
    configuration.implementation DependenciesInjection.DaggerAndroidSupport
    configuration.kapt DependenciesInjection.DaggerAndroidProcessor
    configuration.kapt DependenciesInjection.HiltCompiler
}

void defaultTestingConfiguration(configuration) {
    def TestingConfiguration = rootProject.ext.TestingConfiguration
    configuration.testImplementation TestingConfiguration.Junit
    configuration.androidTestImplementation TestingConfiguration.Esspresso
    configuration.androidTestImplementation TestingConfiguration.Runner
}

void lifeCycleConfiguration(configuration) {
    def LifeCycleConfiguration = rootProject.ext.LifeCycleConfiguration
    configuration.implementation LifeCycleConfiguration.LifecycleViewModel
    configuration.implementation LifeCycleConfiguration.LifecycleExtensions
    configuration.implementation LifeCycleConfiguration.LifecycleRuntime
    configuration.implementation LifeCycleConfiguration.LifecycleLiveData
    configuration.implementation LifeCycleConfiguration.LifecycleCommon
    configuration.implementation LifeCycleConfiguration.LifeCycleSavedState
}