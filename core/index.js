/*
 * This File is the Primary File in Legora Core Source Code
 * From Here the All Code for Modules, Generators, Projects, Attributes will be in This Project
 * This Project Will be Shared with Website, CLI, and The Desktop Application Will Use This Attributes
 * Return values from Website Server Request and Draw the UI on Desktop, Then Submit the Results to the Generator CLI
 * By Executing The Command Line CLI Arguments for Each Generator in the Project
 *
 * The Project Structure is the Following
 * 1. The Core Source Code is the Generic Source Code for CLI
 * 2. Cli Will Support Commands for All Generators
 * 3. This Core Source Code will be Included as a Dependency in The Website
 * 4. Website is Running on The Server and Will return Everything Required to UI by Api Request
 * 5. Desktop Application Will Execute Command Line With The Filled Arguments
 * 6. CLI Will Start Generating From Generators in Core Library
 * 7. Everything is Generated by Templating Engine to Generate Templates
 * 8. All Core Files is Written in **.mjs to Support Modules Import
 *
 * Project Author: Yazan Tarifi : https://github.com/Yazan98
 * Project Link : https://github.com/Yazan98/Legora
 * Project Website https://legora.me
 *
 */
import getSupportedProjects from "./providers/ProjectsProvider.mjs";

console.log("Legora Test Mode ========================================================================")
console.log("Legora index.js Started !!")
console.log("Legora Print Supported Projects")
console.log(getSupportedProjects())
console.log("Legora Test Mode ========================================================================")

/**
 * This Method Used to Start Legora Generator To Pick The Generator with Project Key and Start Executing The Build Files
 * This Method is the Main Method in the Library
 * @param generatePath -> The Path to Generate the Project
 * @param projectKey -> The Project you Want to Generate
 * @param dependencies -> The Required Dependencies to The Project
 * @param information -> The Fields in ProjectInformationProvider File
 */
export default function onLegoraGeneratorExecute(
    generatePath = "",
    projectKey = "",
    dependencies = {},
    information = {}
) {
    console.log("Legora Generator Started ...")
    console.log("Project Info : ", generatePath, projectKey)
}

/**
 * Desktop Application is Used to Send One String with All Picked Items and This Method Will Start Splitting The Query
 * To Objects To Start the Generator
 *
 * This Method Should be Called from the CLI once Started From Desktop Application
 * @param query
 */
export function onLegoraExtractTerminalCommand(query = "") {
    const information = {};
    const dependencies = {};
    let projectKey = ""
    let generatedPath = ""

    // Extract The Project Informations Here
    const querySegments = query.replace("generate ", "").split("-args")
    console.log("Legora Terminal Command Query Segments : " + querySegments)

    // Validation Checks
    if (!projectKey) {
        throw 'projectKey is Not Provided';
    }

    if (!generatedPath) {
        throw 'generatedPath is Not Provided';
    }

    if (!information) {
        throw 'information is Not Provided';
    }

    // After Extracting the Values, Start the Generator
    onLegoraGeneratorExecute(generatedPath, projectKey, dependencies, information)
}

/**
 * Hardcoded Example To Generate the Project
 * This Example is Just working on Development Mode to Provide Example on Generator Query
 */
const generatorQuery = "generate -args[projectKey:SINGLE_APP_ANDROID] -args[generatedPath:D:\\Test Generator] -args[information][key:value] -args[information][key:value] -args[dependencies][key:value]"
onLegoraExtractTerminalCommand(generatorQuery)


